# WriteCrew Word Add-in Server Configuration
# Optimized for Office Add-in hosting with proper HTTPS and caching

server {
    listen 8080;
    server_name _;
    root /usr/share/nginx/html;
    index index.html taskpane.html;

    # Security headers specific to Office Add-ins
    add_header X-Frame-Options "ALLOWALL" always;
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

    # Handle preflight requests
    location ~* \.(OPTIONS)$ {
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
        add_header Access-Control-Max-Age 86400;
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 200;
    }

    # Main application routes
    location / {
        try_files $uri $uri/ /taskpane.html;
        
        # Cache control for HTML files
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, no-cache, must-revalidate";
        }
    }

    # Office Add-in specific routes
    location /taskpane.html {
        expires 1h;
        add_header Cache-Control "public, no-cache, must-revalidate";
        try_files $uri =404;
    }

    location /commands.html {
        expires 1h;
        add_header Cache-Control "public, no-cache, must-revalidate";
        try_files $uri =404;
    }

    location /manifest.xml {
        expires 1h;
        add_header Cache-Control "public, no-cache, must-revalidate";
        add_header Content-Type "application/xml";
        try_files $uri =404;
    }

    # Static assets with long-term caching
    location ~* \.(js|css)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Apply rate limiting
        limit_req zone=static burst=50 nodelay;
    }

    # Images and fonts
    location ~* \.(png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Apply rate limiting
        limit_req zone=static burst=100 nodelay;
    }

    # API proxy (if needed for development)
    location /api/ {
        proxy_pass https://api.writecrew.app/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Apply rate limiting
        limit_req zone=api burst=20 nodelay;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Robots.txt
    location /robots.txt {
        return 200 "User-agent: *\nDisallow: /\n";
        add_header Content-Type text/plain;
    }

    # Security.txt
    location /.well-known/security.txt {
        return 200 "Contact: security@writecrew.app\nExpires: 2024-12-31T23:59:59.000Z\nPreferred-Languages: en\n";
        add_header Content-Type text/plain;
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to backup files
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }

    # Logging
    access_log /var/log/nginx/writecrew-access.log main;
    error_log /var/log/nginx/writecrew-error.log warn;
}

