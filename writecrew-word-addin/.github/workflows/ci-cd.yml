name: WriteCrew CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'
  AZURE_WEBAPP_NAME: 'writecrew-backend'
  AZURE_WEBAPP_PACKAGE_PATH: './writecrew-backend'

jobs:
  # Frontend Testing and Build
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: writecrew-word-addin/package-lock.json
        
    - name: Install dependencies
      working-directory: ./writecrew-word-addin
      run: npm ci
      
    - name: Run linting
      working-directory: ./writecrew-word-addin
      run: npm run lint
      
    - name: Run tests
      working-directory: ./writecrew-word-addin
      run: npm run test:ci
      
    - name: Run security audit
      working-directory: ./writecrew-word-addin
      run: npm run security:audit
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: writecrew-word-addin/test-results.xml

  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: writecrew_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      working-directory: ./writecrew-backend
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run backend tests
      working-directory: ./writecrew-backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/writecrew_test
        REDIS_URL: redis://localhost:6379
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./writecrew-backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Build
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs: frontend-test
    
    strategy:
      matrix:
        environment: [development, staging, production]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: writecrew-word-addin/package-lock.json
        
    - name: Install dependencies
      working-directory: ./writecrew-word-addin
      run: npm ci
      
    - name: Build for ${{ matrix.environment }}
      working-directory: ./writecrew-word-addin
      env:
        NODE_ENV: ${{ matrix.environment }}
        PRODUCTION_URL: ${{ matrix.environment == 'production' && 'https://writecrew.app' || matrix.environment == 'staging' && 'https://staging.writecrew.app' || 'https://dev.writecrew.app' }}
      run: |
        if [ "${{ matrix.environment }}" = "production" ]; then
          npm run build
        elif [ "${{ matrix.environment }}" = "staging" ]; then
          npm run build:staging
        else
          npm run build
        fi
        
    - name: Generate bundle analysis
      working-directory: ./writecrew-word-addin
      if: matrix.environment == 'production'
      run: npm run build:analyze
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.environment }}
        path: writecrew-word-addin/dist/
        retention-days: 30

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Development Deployment
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-test]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-development
        path: ./dist
        
    - name: Deploy to Azure Storage (Development)
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az storage blob upload-batch \
            --account-name writecrewdev \
            --auth-mode key \
            --destination '$web' \
            --source ./dist \
            --overwrite
      env:
        AZURE_STORAGE_ACCOUNT: writecrewdev
        AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY_DEV }}

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-test, security-scan]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-staging
        path: ./dist
        
    - name: Deploy to Azure Storage (Staging)
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az storage blob upload-batch \
            --account-name writecrewstaging \
            --auth-mode key \
            --destination '$web' \
            --source ./dist \
            --overwrite
      env:
        AZURE_STORAGE_ACCOUNT: writecrewstaging
        AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY_STAGING }}

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-test, security-scan]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-production
        path: ./dist
        
    - name: Deploy to Azure Storage (Production)
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az storage blob upload-batch \
            --account-name writecrewprod \
            --auth-mode key \
            --destination '$web' \
            --source ./dist \
            --overwrite
      env:
        AZURE_STORAGE_ACCOUNT: writecrewprod
        AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY_PROD }}
        
    - name: Invalidate CDN cache
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az cdn endpoint purge \
            --resource-group writecrew-prod-rg \
            --name writecrew-cdn \
            --profile-name writecrew-cdn-profile \
            --content-paths "/*"

  # Backend Deployment
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: backend-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.event_name == 'release'
    
    strategy:
      matrix:
        environment: 
          - ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}
    
    environment: ${{ matrix.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}-${{ matrix.environment }}
        publish-profile: ${{ secrets[format('AZURE_WEBAPP_PUBLISH_PROFILE_{0}', upper(matrix.environment))] }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run Lighthouse CI
      run: lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_SERVER_BASE_URL: https://staging.writecrew.app

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-backend]
    if: always() && (github.event_name == 'release' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#writecrew-deployments'
        text: |
          WriteCrew deployment completed!
          Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

